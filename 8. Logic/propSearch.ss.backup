
(define rules
  '(
  ;finish conditions  
  ((visited00 goal00)(finished)) ((visited01 goal01)(finished)) ((visited02 goal02)(finished))
  ((visited10 goal10)(finished)) ((visited20 goal20)(finished)) ((visited11 goal11)(finished))
  ((visited12 goal12)(finished)) ((visited21 goal21)(finished)) ((visited22 goal22)(finished))

  ;movement conditions
  ((visited00 (not obstacle01)) (visited01)) ((visited01 (not obstacle02)) (visited02)) ((visited10 (not obstacle11)) (visited11))  
  ((visited11 (not obstacle12)) (visited12)) ((visited20 (not obstacle21)) (visited21)) ((visited21 (not obstacle22)) (visited22))  
  ((visited01 (not obstacle00)) (visited00)) ((visited02 (not obstacle01)) (visited01)) ((visited11 (not obstacle10)) (visited10))  
  ((visited12 (not obstacle11)) (visited11)) ((visited21 (not obstacle20)) (visited20)) ((visited22 (not obstacle21)) (visited21))  
  ((visited00 (not obstacle10)) (visited10)) ((visited01 (not obstacle11)) (visited11)) ((visited02 (not obstacle12)) (visited12))  
  ((visited10 (not obstacle20)) (visited20)) ((visited11 (not obstacle21)) (visited21)) ((visited12 (not obstacle22)) (visited22))  
  ((visited10 (not obstacle00)) (visited00)) ((visited11 (not obstacle01)) (visited01)) ((visited12 (not obstacle02)) (visited02))  
  ((visited20 (not obstacle10)) (visited10)) ((visited21 (not obstacle11)) (visited11)) ((visited22 (not obstacle12)) (visited12))  
  ))


(define facts
  '(goal22 visited00 obstacle11 obstacle21))

(define ModusPonens
  (lambda (rule)
    (ModusPonens2 (car rule) (cadr rule))))
      
(define ModusPonens2 
  (lambda (b a)
    (cond
      [(null? b) '()] 
      [(member (car b) facts) (ModusPonens2 (cdr b) a)]
      [else 
       (if (member (car b) facts)
           (ModusPonens2 (cdr b) a)
           (begin
             (set! facts (cons a facts))
             (list a)))])))


(define search
  (lambda (count)
    (cond
      [(member 'finished facts)
       (display "goal found")
       (newline)]
      
      [(<= count 0)
       (begin
       (display facts)
       (display "not found"))
       (newline)]
      
      [else
        (let* ((firstRule (car rules))
               (remainingRules (append (cdr rules) (list firstRule)))
               (newFact (ModusPonens firstRule)))

          (if (not (null? newFact))
              (begin
                (set! facts (append newFact facts))
                (set! rules remainingRules)
                (search (- count 1)))

              (begin
                (set! rules remainingRules)
                (search (- count 1)))))])))
